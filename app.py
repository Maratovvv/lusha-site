from flask import Flask, render_template, jsonify, request
import random
import requests
from datetime import datetime
import pytz
import traceback
import re

app = Flask(__name__)

OWM_API_KEY = "dbf1c332caec3ca0dc92ec2136609b42"

def get_weather(city_name):
    try:
        if not city_name:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–≥–æ–¥–∞ –≤ –ë–∏—à–∫–µ–∫–µ"

        geo_url = f"http://api.openweathermap.org/geo/1.0/direct?q={city_name}&limit=1&appid={OWM_API_KEY}"
        geo_response = requests.get(geo_url, timeout=5).json()

        if not isinstance(geo_response, list) or len(geo_response) == 0:
            return "–Ø –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üòä"

        lat = geo_response[0]['lat']
        lon = geo_response[0]['lon']
        weather_url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={OWM_API_KEY}&units=metric&lang=ru"
        weather_data = requests.get(weather_url, timeout=5).json()

        temp = weather_data['main']['temp']
        desc = weather_data['weather'][0]['description']
        wind = weather_data['wind']['speed']
        return f"{city_name.capitalize()}: {temp}¬∞C, {desc}, –≤–µ—Ç–µ—Ä {wind} –º/—Å."

    except Exception:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:\n{traceback.format_exc(limit=1)}"

def get_exchange_rate(currency_code):
    try:
        url = "https://open.er-api.com/v6/latest/KGS"
        res = requests.get(url, timeout=5)
        if res.status_code != 200:
            return "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç."
        data = res.json()
        rates = data.get('rates', {})
        rate = rates.get(currency_code)
        if not rate:
            return "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        exchange_rate = 1 / rate
        return f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {currency_code} –∫ —Å–æ–º—É: {exchange_rate:.2f}"
    except Exception:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç:\n{traceback.format_exc(limit=1)}"

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/ask', methods=['POST'])
def ask():
    data = request.get_json()
    question = data.get('question', '').lower()

    if any(word in question for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello']):
        return jsonify({'answer': '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'})

    if any(word in question for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã']):
        return jsonify({'answer': '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ!'})

    if any(word in question for word in ['—à—É—Ç–∫–∞', '—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É', '–∞–Ω–µ–∫–¥–æ—Ç']):
        jokes = [
            '–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–∫–æ–Ω.',
            '–ß—Ç–æ —Å–∫–∞–∑–∞–ª –Ω–æ–ª—å –≤–æ—Å—å–º–µ—Ä–∫–µ? –ö–ª–∞—Å—Å–Ω—ã–π –ø–æ—è—Å!',
            '–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç –∫–æ—Ñ–µ? –ü–æ—Ç–æ–º—É —á—Ç–æ –±–µ–∑ –Ω–µ–≥–æ –Ω–µ—Ç –∫–æ–¥–∞!'
        ]
        return jsonify({'answer': random.choice(jokes)})

    if '–ø–æ–≥–æ–¥–∞' in question:
        city_match = re.search(r'–ø–æ–≥–æ–¥–∞ –≤ ([–∞-—è–ê-–Ø—ë–Å\s\-]+)', question)
        city = city_match.group(1).strip() if city_match else ''
        if city:
            weather = get_weather(city)
            return jsonify({'answer': weather})
        else:
            return jsonify({'answer': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–≥–æ–¥–∞ –≤ –ë–∏—à–∫–µ–∫–µ'})

    if any(word in question for word in ['–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞', '–∫—É—Ä—Å usd', '–∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä']):
        rate = get_exchange_rate('USD')
        return jsonify({'answer': rate})

    if any(word in question for word in ['–∫—É—Ä—Å –µ–≤—Ä–æ', '–∫—É—Ä—Å eur', '–∫—É—Ä—Å –µ–≤—Ä–æ']):
        rate = get_exchange_rate('EUR')
        return jsonify({'answer': rate})

    if any(word in question for word in ['–≤—Ä–µ–º—è', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å']):
        tz = pytz.timezone('Asia/Bishkek')
        now = datetime.now(tz).strftime('%H:%M')
        return jsonify({'answer': f'–í –ë–∏—à–∫–µ–∫–µ —Å–µ–π—á–∞—Å {now}'})

    if any(word in question for word in ['–¥–∞—Ç–∞', '–∫–∞–∫–æ–µ —á–∏—Å–ª–æ', '—á–∏—Å–ª–æ']):
        date = datetime.now().strftime('%d.%m.%Y')
        return jsonify({'answer': f'–°–µ–≥–æ–¥–Ω—è {date}'})

    if any(word in question for word in ['—Å—Ç–æ–ø', '–≤—ã–∫–ª—é—á–∏—Å—å', '–∑–∞–∫—Ä–æ–π']):
        return jsonify({'answer': '–•–æ—Ä–æ—à–æ, –æ—Ç–∫–ª—é—á–∞—é—Å—å.'})

    smart_phrases = [
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
        "–•–º... –ª—é–±–æ–ø—ã—Ç–Ω–æ. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ!",
        "–≠—Ç–æ —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å. –Ø –±—ã —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∞ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
        "–ü–æ—è—Å–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?",
        "–≠—Ç–æ –∑–≤—É—á–∏—Ç –∫–∞–∫ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
    ]
    return jsonify({'answer': random.choice(smart_phrases)})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
